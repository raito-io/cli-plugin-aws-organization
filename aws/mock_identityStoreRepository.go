// Code generated by mockery v2.35.3. DO NOT EDIT.

package aws

import (
	context "context"

	config "github.com/raito-io/cli/base/util/config"

	identity_store "github.com/raito-io/cli/base/identity_store"

	mock "github.com/stretchr/testify/mock"
)

// mockIdentityStoreRepository is an autogenerated mock type for the identityStoreRepository type
type mockIdentityStoreRepository struct {
	mock.Mock
}

type mockIdentityStoreRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIdentityStoreRepository) EXPECT() *mockIdentityStoreRepository_Expecter {
	return &mockIdentityStoreRepository_Expecter{mock: &_m.Mock}
}

// GetGroups provides a mock function with given fields: ctx, identityStores, configMap
func (_m *mockIdentityStoreRepository) GetGroups(ctx context.Context, identityStores []string, configMap *config.ConfigMap) ([]identity_store.Group, map[string][]string, error) {
	ret := _m.Called(ctx, identityStores, configMap)

	var r0 []identity_store.Group
	var r1 map[string][]string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *config.ConfigMap) ([]identity_store.Group, map[string][]string, error)); ok {
		return rf(ctx, identityStores, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, *config.ConfigMap) []identity_store.Group); ok {
		r0 = rf(ctx, identityStores, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]identity_store.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, *config.ConfigMap) map[string][]string); ok {
		r1 = rf(ctx, identityStores, configMap)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, *config.ConfigMap) error); ok {
		r2 = rf(ctx, identityStores, configMap)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockIdentityStoreRepository_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type mockIdentityStoreRepository_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - identityStores []string
//   - configMap *config.ConfigMap
func (_e *mockIdentityStoreRepository_Expecter) GetGroups(ctx interface{}, identityStores interface{}, configMap interface{}) *mockIdentityStoreRepository_GetGroups_Call {
	return &mockIdentityStoreRepository_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, identityStores, configMap)}
}

func (_c *mockIdentityStoreRepository_GetGroups_Call) Run(run func(ctx context.Context, identityStores []string, configMap *config.ConfigMap)) *mockIdentityStoreRepository_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockIdentityStoreRepository_GetGroups_Call) Return(_a0 []identity_store.Group, _a1 map[string][]string, _a2 error) *mockIdentityStoreRepository_GetGroups_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockIdentityStoreRepository_GetGroups_Call) RunAndReturn(run func(context.Context, []string, *config.ConfigMap) ([]identity_store.Group, map[string][]string, error)) *mockIdentityStoreRepository_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityStores provides a mock function with given fields: ctx, configMap
func (_m *mockIdentityStoreRepository) GetIdentityStores(ctx context.Context, configMap *config.ConfigMap) ([]string, error) {
	ret := _m.Called(ctx, configMap)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) ([]string, error)); ok {
		return rf(ctx, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *config.ConfigMap) []string); ok {
		r0 = rf(ctx, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *config.ConfigMap) error); ok {
		r1 = rf(ctx, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIdentityStoreRepository_GetIdentityStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityStores'
type mockIdentityStoreRepository_GetIdentityStores_Call struct {
	*mock.Call
}

// GetIdentityStores is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *config.ConfigMap
func (_e *mockIdentityStoreRepository_Expecter) GetIdentityStores(ctx interface{}, configMap interface{}) *mockIdentityStoreRepository_GetIdentityStores_Call {
	return &mockIdentityStoreRepository_GetIdentityStores_Call{Call: _e.mock.On("GetIdentityStores", ctx, configMap)}
}

func (_c *mockIdentityStoreRepository_GetIdentityStores_Call) Run(run func(ctx context.Context, configMap *config.ConfigMap)) *mockIdentityStoreRepository_GetIdentityStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockIdentityStoreRepository_GetIdentityStores_Call) Return(_a0 []string, _a1 error) *mockIdentityStoreRepository_GetIdentityStores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIdentityStoreRepository_GetIdentityStores_Call) RunAndReturn(run func(context.Context, *config.ConfigMap) ([]string, error)) *mockIdentityStoreRepository_GetIdentityStores_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, identityStores, configMap
func (_m *mockIdentityStoreRepository) GetUsers(ctx context.Context, identityStores []string, configMap *config.ConfigMap) ([]identity_store.User, error) {
	ret := _m.Called(ctx, identityStores, configMap)

	var r0 []identity_store.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *config.ConfigMap) ([]identity_store.User, error)); ok {
		return rf(ctx, identityStores, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, *config.ConfigMap) []identity_store.User); ok {
		r0 = rf(ctx, identityStores, configMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]identity_store.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, *config.ConfigMap) error); ok {
		r1 = rf(ctx, identityStores, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIdentityStoreRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type mockIdentityStoreRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - identityStores []string
//   - configMap *config.ConfigMap
func (_e *mockIdentityStoreRepository_Expecter) GetUsers(ctx interface{}, identityStores interface{}, configMap interface{}) *mockIdentityStoreRepository_GetUsers_Call {
	return &mockIdentityStoreRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, identityStores, configMap)}
}

func (_c *mockIdentityStoreRepository_GetUsers_Call) Run(run func(ctx context.Context, identityStores []string, configMap *config.ConfigMap)) *mockIdentityStoreRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(*config.ConfigMap))
	})
	return _c
}

func (_c *mockIdentityStoreRepository_GetUsers_Call) Return(_a0 []identity_store.User, _a1 error) *mockIdentityStoreRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIdentityStoreRepository_GetUsers_Call) RunAndReturn(run func(context.Context, []string, *config.ConfigMap) ([]identity_store.User, error)) *mockIdentityStoreRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIdentityStoreRepository creates a new instance of mockIdentityStoreRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIdentityStoreRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIdentityStoreRepository {
	mock := &mockIdentityStoreRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
